import 'dart:typed_data';
import 'package:ffi_helper/ffi_helper.dart';
import 'bindings/auth.dart' as bindings;
import 'internal_helpers.dart';

/// Authenticates messages with an authentication tag
class Authenticator {
  static const keyBytes = 32;

  /// Generates a key for [Authenticator].
  static UnmodifiableUint8ListView _keyGen() {
    final keyPtr = Uint8Array.allocate(count: keyBytes);
    bindings.keyGen(keyPtr.rawPtr);
    keyPtr.freeZero();
    final key = Uint8List.fromList(keyPtr.view);
    return UnmodifiableUint8ListView(key);
  }

  final UnmodifiableUint8ListView key;
  const Authenticator._(this.key);

  /// If [key] is left empty, a key will be generated.
  /// [key] must be [keyBytes] long.
  factory Authenticator([Uint8List key]) {
    if (key != null) {
      checkExpectedLengthOf(key.length, bindings.keyBytes, 'key');
    } else {
      key = _keyGen();
    }
    return Authenticator._(UnmodifiableUint8ListView(key));
  }

  /// Generates an authentication tag for [message].
  Uint8List authenticate(Uint8List message) {
    final messagePtr = Uint8Array.fromTypedList(message);
    final keyPtr = Uint8Array.fromTypedList(key);
    final tagPtr = Uint8Array.allocate(count: bindings.authBytes);

    final result = bindings.auth(
        tagPtr.rawPtr, messagePtr.rawPtr, message.length, keyPtr.rawPtr);
    messagePtr.free();
    keyPtr.view.fillZero();
    keyPtr.free();
    tagPtr.free();
    if (result != 0) {
      throw Exception();
    }
    return Uint8List.fromList(tagPtr.view);
  }

  /// Verifies authenticity of [message] given its [authTag] generated by [auth].
  bool verify(Uint8List authTag, Uint8List message) {
    checkExpectedLengthOf(authTag.length, bindings.authBytes, 'authTag');
    final messagePtr = Uint8Array.fromTypedList(message);
    final keyPtr = Uint8Array.fromTypedList(key);
    final tagPtr = Uint8Array.fromTypedList(authTag);
    final result = bindings.verify(
        tagPtr.rawPtr, messagePtr.rawPtr, message.length, keyPtr.rawPtr);
    messagePtr.free();
    keyPtr.view.fillZero();
    keyPtr.free();
    tagPtr.free();
    return result == 0;
  }
}
