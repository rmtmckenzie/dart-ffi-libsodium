import 'dart:typed_data';

import 'package:ffi_helper/ffi_helper.dart';

import 'bindings/auth.dart';
import 'helpers/internal_helpers.dart';

/// Authenticates messages with an authentication tag
class Authenticator {
  final Authentication _bindings;

  final UnmodifiableUint8ListView key;

  /// [key] must be [keyBytes] long.
  Authenticator._(this.key, this._bindings) {
    checkExpectedLengthOf(key.length, _bindings.keyBytes, 'key');
  }

  /// Instantiates with a given key.
  factory Authenticator.fromKey(Uint8List key, [Authentication authentication]) =>
      Authenticator._(key, authentication ?? Authentication());

  /// Instantiates with a newly generated key.
  factory Authenticator.withNewKey([Authentication authentication]) {
    final _auth = authentication ?? Authentication();

    final key = freeZero1(Uint8Array.allocate(count: _auth.keyBytes), (keyPtr) {
      _auth.keyGen(keyPtr.rawPtr);
      return Uint8List.fromList(keyPtr.view);
    });

    return Authenticator._(UnmodifiableUint8ListView(key), _auth);
  }

  /// Generates an authentication tag for [message].
  Uint8List authenticate(Uint8List message) {
    return free2freeZero1(
      message.asArray, // messagePtr
      Uint8Array.allocate(count: _bindings.authBytes), // tagPtr
      key.asArray, // keyPtr
      (messagePtr, tagPtr, keyPtr) {
        final result = _bindings.auth(tagPtr.rawPtr, messagePtr.rawPtr, message.length, keyPtr.rawPtr);
        if (result != 0) {
          throw Exception();
        }
        return Uint8List.fromList(tagPtr.view);
      },
    );
  }

  /// Verifies authenticity of [message] given its [authTag] generated by [auth].
  bool verify(Uint8List authTag, Uint8List message) {
    checkExpectedLengthOf(authTag.length, _bindings.authBytes, 'authTag');
    return free2freeZero1(
      message.asArray, // messagePtr
      authTag.asArray, // tagPtr
      key.asArray, // keyPtr
      (messagePtr, tagPtr, keyPtr) {
        final result = _bindings.verify(tagPtr.rawPtr, messagePtr.rawPtr, message.length, keyPtr.rawPtr);
        return result == 0;
      },
    );
  }
}
