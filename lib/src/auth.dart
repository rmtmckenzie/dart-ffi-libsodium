import 'dart:typed_data';
import 'package:ffi_helper/ffi_helper.dart';
import 'bindings/auth.dart' as bindings;
import 'internal_helpers.dart';

/// Generates a key for [auth].
UnmodifiableUint8ListView keyGen() {
  final keyPtr = Uint8Array.allocate(count: bindings.keyBytes);
  bindings.keyGen(keyPtr.rawPtr);
  keyPtr.freeZero();
  final key = Uint8List.fromList(keyPtr.view);
  return UnmodifiableUint8ListView(key);
}

/// Generates an authentication tag for [message].
/// [key] must be [keyBytes] long.
Uint8List auth(Uint8List message, Uint8List key) {
  final messagePtr = Uint8Array.fromTypedList(message);
  final keyPtr = Uint8Array.fromTypedList(key);
  final tagPtr = Uint8Array.allocate(count: bindings.authBytes);

  final result = bindings.auth(
      tagPtr.rawPtr, messagePtr.rawPtr, message.length, keyPtr.rawPtr);
  messagePtr.free();
  keyPtr.view.fillZero();
  keyPtr.free();
  tagPtr.free();
  if (result != 0) {
    checkExpectedArgument(key.length, bindings.keyBytes, 'key.length');
    throw Error();
  }
  return Uint8List.fromList(tagPtr.view);
}

/// Verifies authenticity of [message] given its [authTag] generated by [auth].
bool verify(Uint8List authTag, Uint8List message, Uint8List key) {
  assert(key.length == bindings.keyBytes);
  assert(authTag.length == bindings.authBytes);
  final messagePtr = Uint8Array.fromTypedList(message);
  final keyPtr = Uint8Array.fromTypedList(key);
  final tagPtr = Uint8Array.fromTypedList(authTag);
  final result = bindings.verify(
      tagPtr.rawPtr, messagePtr.rawPtr, message.length, keyPtr.rawPtr);
  messagePtr.free();
  keyPtr.view.fillZero();
  keyPtr.free();
  tagPtr.free();
  return result == 0;
}
